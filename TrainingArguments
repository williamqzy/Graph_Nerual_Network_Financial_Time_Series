from trainer.trainer import train_epoch as train_epoch_old, eval_epoch as eval_epoch_old
from data_loader import AllGraphDataSampler, extract_data
from model.Thgnn import StockHeteGAT
import warnings
import torch
import os
from torch.utils.data import DataLoader
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR
import pandas as pd
from pandas.core.frame import DataFrame
from tqdm import tqdm

warnings.filterwarnings("ignore")
t_float = torch.float64
torch.multiprocessing.set_sharing_strategy('file_system')

class TrainingArguments:
  def __init__(self, gpu = 0, substack = "regression"):
        self.gpu = str(gpu)
        self.device = 'cpu'
        self.adj_threshold = 0.1
        self.adj_str = str(int(100*self.adj_threshold))
        self.pos_adj_dir = "pos_adj_" + self.adj_str
        self.neg_adj_dir = "neg_adj_" + self.adj_str
        self.feat_dir = "features"
        self.label_dir = "label"
        self.mask_dir = "mask"
        self.data_start = data_start
        self.data_middle = data_middle
        self.data_end = data_end
        self.pre_data = pre_data
        self.max_epochs = 60
        self.epochs_eval = 10
        self.lr = 0.0002
        self.gamma = 0.3
        self.hidden_dim = 128
        self.num_heads = 8
        self.out_features = 32
        self.model_name = "StockHeteGAT"
        self.batch_size = 1
        self.loss_fcn = mean_squared_error_loss
        self.save_path = os.path.join(os.path.abspath('.'), "/home/THGNN-main/data/model_saved/")
        self.load_path = self.save_path
        self.save_name = self.model_name + "_hidden_" + str(self.hidden_dim) + "_head_" + str(self.num_heads) + \
                         "_outfeat_" + str(self.out_features) + "_batchsize_" + str(self.batch_size) + "_adjth_" + \
                         str(self.adj_str)
        self.epochs_save_by = 60
        self.sub_task = subtask
        eval("self.{}".format(self.sub_task))()

    def regression(self):
        self.save_name = self.save_name + "_reg_rank_"
        self.loss_fcn = mean_squared_error_loss
        self.label_dir = self.label_dir + "_regression"
        self.mask_dir = self.mask_dir + "_regression"
